{"version":3,"sources":["../node_modules/localforage/dist/localforage.js"],"names":["global","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","require","f","_typeof2","__webpack_require__","e","t","n","r","s","o","u","i","Error","code","l","exports","call","length","1","_dereq_","module","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","task","push","this","self","window","2","immediate","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","reject","resolve","getThen","obj","then","apply","arguments","thenable","onError","onSuccess","result","tryCatch","status","out","prototype","constructor","error","reason","all","iterable","Object","toString","values","Array","resolved","allResolver","outValue","race","response","3","4","_typeof","Symbol","iterator","idb","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","getIDB","createBlob","parts","properties","Blob","name","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","console","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_checkBlobSupport","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","match","matchedEdge","parseInt","_checkBlobSupportWithoutCaching","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","forages","db","close","dbArgs","version","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_decodeBlob","encodedBlob","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_binStringToArrayBuffer","atob","_isEncodedBlob","__local_forage_encoded_blob","_fullyReady","_initReady","_dbInfo","createTransaction","mode","retries","undefined","tx","forage","_tryReconnect","asyncStorage","_driver","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","_support","isSafari","openDatabase","test","platform","hasFetch","fetch","indexOf","IDBKeyRange","isIndexedDBValid","iterate","req","openCursor","iterationNumber","cursor","getItem","get","setItem","blobSupport","reader","FileReader","onloadend","base64","btoa","target","readAsBinaryString","store","removeItem","clear","count","advanced","advance","keys","dropInstance","currentConfig","config","dbPromise","deleteObjectStore","_forage2","deleteDatabase","onblocked","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","substring","localforageSerializer","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","JSON","stringify","deserialize","parse","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","createDbTable","executeSql","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","webSQLStorage","dbInfoPromise","description","size","serializer","item","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","c","storeNames","getAllStoreNames","operationInfo","dropTable","operations","_getKeyPrefix","defaultConfig","keyPrefix","_isLocalStorageUsable","localStorage","checkIfLocalStorageThrows","localStorageWrapper","isLocalStorageValid","keyPrefixLength","itemKey","includes","array","searchElement","x","y","isNaN","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","hasOwnProperty","localforage_js","LocalForage","driverTypeKey","instance","Constructor","_classCallCheck","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","configureMissingMethods","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","oldDriverSetDone","currentDriverIndex","driverPromiseLoop","initDriver","supports","libraryMethodsAndProperties","createInstance"],"mappings":"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","file":"static/js/2.1945ddb0.chunk.js","sourcesContent":["var _typeof2 = require(\"/Users/xcsun/sugar/facilitator/node_modules/@babel/runtime/helpers/typeof\");\n\n/*!\n    localForage -- Offline Storage, Improved\n    Version 1.7.2\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function (f) {\n  if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof2(exports)) === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.localforage = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) {\n      s(r[o]);\n    }\n\n    return s;\n  }({\n    1: [function (_dereq_, module, exports) {\n      (function (global) {\n        'use strict';\n\n        var Mutation = global.MutationObserver || global.WebKitMutationObserver;\n        var scheduleDrain;\n        {\n          if (Mutation) {\n            var called = 0;\n            var observer = new Mutation(nextTick);\n            var element = global.document.createTextNode('');\n            observer.observe(element, {\n              characterData: true\n            });\n\n            scheduleDrain = function scheduleDrain() {\n              element.data = called = ++called % 2;\n            };\n          } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n            var channel = new global.MessageChannel();\n            channel.port1.onmessage = nextTick;\n\n            scheduleDrain = function scheduleDrain() {\n              channel.port2.postMessage(0);\n            };\n          } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n            scheduleDrain = function scheduleDrain() {\n              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n              var scriptEl = global.document.createElement('script');\n\n              scriptEl.onreadystatechange = function () {\n                nextTick();\n                scriptEl.onreadystatechange = null;\n                scriptEl.parentNode.removeChild(scriptEl);\n                scriptEl = null;\n              };\n\n              global.document.documentElement.appendChild(scriptEl);\n            };\n          } else {\n            scheduleDrain = function scheduleDrain() {\n              setTimeout(nextTick, 0);\n            };\n          }\n        }\n        var draining;\n        var queue = []; //named nextTick for less confusing stack traces\n\n        function nextTick() {\n          draining = true;\n          var i, oldQueue;\n          var len = queue.length;\n\n          while (len) {\n            oldQueue = queue;\n            queue = [];\n            i = -1;\n\n            while (++i < len) {\n              oldQueue[i]();\n            }\n\n            len = queue.length;\n          }\n\n          draining = false;\n        }\n\n        module.exports = immediate;\n\n        function immediate(task) {\n          if (queue.push(task) === 1 && !draining) {\n            scheduleDrain();\n          }\n        }\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    2: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var immediate = _dereq_(1);\n      /* istanbul ignore next */\n\n\n      function INTERNAL() {}\n\n      var handlers = {};\n      var REJECTED = ['REJECTED'];\n      var FULFILLED = ['FULFILLED'];\n      var PENDING = ['PENDING'];\n      module.exports = Promise;\n\n      function Promise(resolver) {\n        if (typeof resolver !== 'function') {\n          throw new TypeError('resolver must be a function');\n        }\n\n        this.state = PENDING;\n        this.queue = [];\n        this.outcome = void 0;\n\n        if (resolver !== INTERNAL) {\n          safelyResolveThenable(this, resolver);\n        }\n      }\n\n      Promise.prototype[\"catch\"] = function (onRejected) {\n        return this.then(null, onRejected);\n      };\n\n      Promise.prototype.then = function (onFulfilled, onRejected) {\n        if (typeof onFulfilled !== 'function' && this.state === FULFILLED || typeof onRejected !== 'function' && this.state === REJECTED) {\n          return this;\n        }\n\n        var promise = new this.constructor(INTERNAL);\n\n        if (this.state !== PENDING) {\n          var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n          unwrap(promise, resolver, this.outcome);\n        } else {\n          this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n        }\n\n        return promise;\n      };\n\n      function QueueItem(promise, onFulfilled, onRejected) {\n        this.promise = promise;\n\n        if (typeof onFulfilled === 'function') {\n          this.onFulfilled = onFulfilled;\n          this.callFulfilled = this.otherCallFulfilled;\n        }\n\n        if (typeof onRejected === 'function') {\n          this.onRejected = onRejected;\n          this.callRejected = this.otherCallRejected;\n        }\n      }\n\n      QueueItem.prototype.callFulfilled = function (value) {\n        handlers.resolve(this.promise, value);\n      };\n\n      QueueItem.prototype.otherCallFulfilled = function (value) {\n        unwrap(this.promise, this.onFulfilled, value);\n      };\n\n      QueueItem.prototype.callRejected = function (value) {\n        handlers.reject(this.promise, value);\n      };\n\n      QueueItem.prototype.otherCallRejected = function (value) {\n        unwrap(this.promise, this.onRejected, value);\n      };\n\n      function unwrap(promise, func, value) {\n        immediate(function () {\n          var returnValue;\n\n          try {\n            returnValue = func(value);\n          } catch (e) {\n            return handlers.reject(promise, e);\n          }\n\n          if (returnValue === promise) {\n            handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n          } else {\n            handlers.resolve(promise, returnValue);\n          }\n        });\n      }\n\n      handlers.resolve = function (self, value) {\n        var result = tryCatch(getThen, value);\n\n        if (result.status === 'error') {\n          return handlers.reject(self, result.value);\n        }\n\n        var thenable = result.value;\n\n        if (thenable) {\n          safelyResolveThenable(self, thenable);\n        } else {\n          self.state = FULFILLED;\n          self.outcome = value;\n          var i = -1;\n          var len = self.queue.length;\n\n          while (++i < len) {\n            self.queue[i].callFulfilled(value);\n          }\n        }\n\n        return self;\n      };\n\n      handlers.reject = function (self, error) {\n        self.state = REJECTED;\n        self.outcome = error;\n        var i = -1;\n        var len = self.queue.length;\n\n        while (++i < len) {\n          self.queue[i].callRejected(error);\n        }\n\n        return self;\n      };\n\n      function getThen(obj) {\n        // Make sure we only access the accessor once as required by the spec\n        var then = obj && obj.then;\n\n        if (obj && (_typeof2(obj) === 'object' || typeof obj === 'function') && typeof then === 'function') {\n          return function appyThen() {\n            then.apply(obj, arguments);\n          };\n        }\n      }\n\n      function safelyResolveThenable(self, thenable) {\n        // Either fulfill, reject or reject with error\n        var called = false;\n\n        function onError(value) {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          handlers.reject(self, value);\n        }\n\n        function onSuccess(value) {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          handlers.resolve(self, value);\n        }\n\n        function tryToUnwrap() {\n          thenable(onSuccess, onError);\n        }\n\n        var result = tryCatch(tryToUnwrap);\n\n        if (result.status === 'error') {\n          onError(result.value);\n        }\n      }\n\n      function tryCatch(func, value) {\n        var out = {};\n\n        try {\n          out.value = func(value);\n          out.status = 'success';\n        } catch (e) {\n          out.status = 'error';\n          out.value = e;\n        }\n\n        return out;\n      }\n\n      Promise.resolve = resolve;\n\n      function resolve(value) {\n        if (value instanceof this) {\n          return value;\n        }\n\n        return handlers.resolve(new this(INTERNAL), value);\n      }\n\n      Promise.reject = reject;\n\n      function reject(reason) {\n        var promise = new this(INTERNAL);\n        return handlers.reject(promise, reason);\n      }\n\n      Promise.all = all;\n\n      function all(iterable) {\n        var self = this;\n\n        if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n          return this.reject(new TypeError('must be an array'));\n        }\n\n        var len = iterable.length;\n        var called = false;\n\n        if (!len) {\n          return this.resolve([]);\n        }\n\n        var values = new Array(len);\n        var resolved = 0;\n        var i = -1;\n        var promise = new this(INTERNAL);\n\n        while (++i < len) {\n          allResolver(iterable[i], i);\n        }\n\n        return promise;\n\n        function allResolver(value, i) {\n          self.resolve(value).then(resolveFromAll, function (error) {\n            if (!called) {\n              called = true;\n              handlers.reject(promise, error);\n            }\n          });\n\n          function resolveFromAll(outValue) {\n            values[i] = outValue;\n\n            if (++resolved === len && !called) {\n              called = true;\n              handlers.resolve(promise, values);\n            }\n          }\n        }\n      }\n\n      Promise.race = race;\n\n      function race(iterable) {\n        var self = this;\n\n        if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n          return this.reject(new TypeError('must be an array'));\n        }\n\n        var len = iterable.length;\n        var called = false;\n\n        if (!len) {\n          return this.resolve([]);\n        }\n\n        var i = -1;\n        var promise = new this(INTERNAL);\n\n        while (++i < len) {\n          resolver(iterable[i]);\n        }\n\n        return promise;\n\n        function resolver(value) {\n          self.resolve(value).then(function (response) {\n            if (!called) {\n              called = true;\n              handlers.resolve(promise, response);\n            }\n          }, function (error) {\n            if (!called) {\n              called = true;\n              handlers.reject(promise, error);\n            }\n          });\n        }\n      }\n    }, {\n      \"1\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      (function (global) {\n        'use strict';\n\n        if (typeof global.Promise !== 'function') {\n          global.Promise = _dereq_(2);\n        }\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"2\": 2\n    }],\n    4: [function (_dereq_, module, exports) {\n      'use strict';\n\n      var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n        return _typeof2(obj);\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n      };\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function getIDB() {\n        /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n        try {\n          if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n          }\n\n          if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n          }\n\n          if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n          }\n\n          if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n          }\n\n          if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n          }\n        } catch (e) {\n          return;\n        }\n      }\n\n      var idb = getIDB();\n\n      function isIndexedDBValid() {\n        try {\n          // Initialize IndexedDB; fall back to vendor-prefixed versions\n          // if needed.\n          if (!idb) {\n            return false;\n          } // We mimic PouchDB here;\n          //\n          // We test for openDatabase because IE Mobile identifies itself\n          // as Safari. Oh the lulz...\n\n\n          var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n          var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1; // Safari <10.1 does not meet our requirements for IDB support (#5572)\n          // since Safari 10.1 shipped with fetch, we can use that to detect it\n\n          return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' && // some outdated implementations of IDB that appear on Samsung\n          // and HTC Android devices <4.4 are missing IDBKeyRange\n          // See: https://github.com/mozilla/localForage/issues/128\n          // See: https://github.com/mozilla/localForage/issues/272\n          typeof IDBKeyRange !== 'undefined';\n        } catch (e) {\n          return false;\n        }\n      } // Abstracts constructing a Blob object, so it also works in older\n      // browsers that don't support the native Blob constructor. (i.e.\n      // old QtWebKit versions, at least).\n      // Abstracts constructing a Blob object, so it also works in older\n      // browsers that don't support the native Blob constructor. (i.e.\n      // old QtWebKit versions, at least).\n\n\n      function createBlob(parts, properties) {\n        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n        parts = parts || [];\n        properties = properties || {};\n\n        try {\n          return new Blob(parts, properties);\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          }\n\n          var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n          var builder = new Builder();\n\n          for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n          }\n\n          return builder.getBlob(properties.type);\n        }\n      } // This is CommonJS because lie is an external dependency, so Rollup\n      // can just ignore it.\n\n\n      if (typeof Promise === 'undefined') {\n        // In the \"nopromises\" build this will just throw if you don't have\n        // a global promise object, but it would throw anyway later.\n        _dereq_(3);\n      }\n\n      var Promise$1 = Promise;\n\n      function executeCallback(promise, callback) {\n        if (callback) {\n          promise.then(function (result) {\n            callback(null, result);\n          }, function (error) {\n            callback(error);\n          });\n        }\n      }\n\n      function executeTwoCallbacks(promise, callback, errorCallback) {\n        if (typeof callback === 'function') {\n          promise.then(callback);\n        }\n\n        if (typeof errorCallback === 'function') {\n          promise[\"catch\"](errorCallback);\n        }\n      }\n\n      function normalizeKey(key) {\n        // Cast the key to a string, as that's all we can set as a key.\n        if (typeof key !== 'string') {\n          console.warn(key + ' used as a key, but it is not a string.');\n          key = String(key);\n        }\n\n        return key;\n      }\n\n      function getCallback() {\n        if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n          return arguments[arguments.length - 1];\n        }\n      } // Some code originally from async_storage.js in\n      // [Gaia](https://github.com/mozilla-b2g/gaia).\n\n\n      var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\n      var supportsBlobs = void 0;\n      var dbContexts = {};\n      var toString = Object.prototype.toString; // Transaction Modes\n\n      var READ_ONLY = 'readonly';\n      var READ_WRITE = 'readwrite'; // Transform a binary string to an array buffer, because otherwise\n      // weird stuff happens when you try to work with the binary string directly.\n      // It is known.\n      // From http://stackoverflow.com/questions/14967647/ (continues on next line)\n      // encode-decode-image-with-base64-breaks-image (2013-04-21)\n\n      function _binStringToArrayBuffer(bin) {\n        var length = bin.length;\n        var buf = new ArrayBuffer(length);\n        var arr = new Uint8Array(buf);\n\n        for (var i = 0; i < length; i++) {\n          arr[i] = bin.charCodeAt(i);\n        }\n\n        return buf;\n      } //\n      // Blobs are not supported in all versions of IndexedDB, notably\n      // Chrome <37 and Android <5. In those versions, storing a blob will throw.\n      //\n      // Various other blob bugs exist in Chrome v37-42 (inclusive).\n      // Detecting them is expensive and confusing to users, and Chrome 37-42\n      // is at very low usage worldwide, so we do a hacky userAgent check instead.\n      //\n      // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n      // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n      // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n      //\n      // Code borrowed from PouchDB. See:\n      // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n      //\n\n\n      function _checkBlobSupportWithoutCaching(idb) {\n        return new Promise$1(function (resolve) {\n          var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n          var blob = createBlob(['']);\n          txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n          txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n          };\n\n          txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//); // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n          };\n        })[\"catch\"](function () {\n          return false; // error, so assume unsupported\n        });\n      }\n\n      function _checkBlobSupport(idb) {\n        if (typeof supportsBlobs === 'boolean') {\n          return Promise$1.resolve(supportsBlobs);\n        }\n\n        return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n          supportsBlobs = value;\n          return supportsBlobs;\n        });\n      }\n\n      function _deferReadiness(dbInfo) {\n        var dbContext = dbContexts[dbInfo.name]; // Create a deferred object representing the current database operation.\n\n        var deferredOperation = {};\n        deferredOperation.promise = new Promise$1(function (resolve, reject) {\n          deferredOperation.resolve = resolve;\n          deferredOperation.reject = reject;\n        }); // Enqueue the deferred operation.\n\n        dbContext.deferredOperations.push(deferredOperation); // Chain its promise to the database readiness.\n\n        if (!dbContext.dbReady) {\n          dbContext.dbReady = deferredOperation.promise;\n        } else {\n          dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n          });\n        }\n      }\n\n      function _advanceReadiness(dbInfo) {\n        var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.\n\n        var deferredOperation = dbContext.deferredOperations.pop(); // Resolve its promise (which is part of the database readiness\n        // chain of promises).\n\n        if (deferredOperation) {\n          deferredOperation.resolve();\n          return deferredOperation.promise;\n        }\n      }\n\n      function _rejectReadiness(dbInfo, err) {\n        var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.\n\n        var deferredOperation = dbContext.deferredOperations.pop(); // Reject its promise (which is part of the database readiness\n        // chain of promises).\n\n        if (deferredOperation) {\n          deferredOperation.reject(err);\n          return deferredOperation.promise;\n        }\n      }\n\n      function _getConnection(dbInfo, upgradeNeeded) {\n        return new Promise$1(function (resolve, reject) {\n          dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n          if (dbInfo.db) {\n            if (upgradeNeeded) {\n              _deferReadiness(dbInfo);\n\n              dbInfo.db.close();\n            } else {\n              return resolve(dbInfo.db);\n            }\n          }\n\n          var dbArgs = [dbInfo.name];\n\n          if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n          }\n\n          var openreq = idb.open.apply(idb, dbArgs);\n\n          if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n              var db = openreq.result;\n\n              try {\n                db.createObjectStore(dbInfo.storeName);\n\n                if (e.oldVersion <= 1) {\n                  // Added when support for blob shims was added\n                  db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                }\n              } catch (ex) {\n                if (ex.name === 'ConstraintError') {\n                  console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                } else {\n                  throw ex;\n                }\n              }\n            };\n          }\n\n          openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n          };\n\n          openreq.onsuccess = function () {\n            resolve(openreq.result);\n\n            _advanceReadiness(dbInfo);\n          };\n        });\n      }\n\n      function _getOriginalConnection(dbInfo) {\n        return _getConnection(dbInfo, false);\n      }\n\n      function _getUpgradedConnection(dbInfo) {\n        return _getConnection(dbInfo, true);\n      }\n\n      function _isUpgradeNeeded(dbInfo, defaultVersion) {\n        if (!dbInfo.db) {\n          return true;\n        }\n\n        var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n        var isDowngrade = dbInfo.version < dbInfo.db.version;\n        var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n        if (isDowngrade) {\n          // If the version is not the default one\n          // then warn for impossible downgrade.\n          if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n          } // Align the versions to prevent errors.\n\n\n          dbInfo.version = dbInfo.db.version;\n        }\n\n        if (isUpgrade || isNewStore) {\n          // If the store is new then increment the version (if needed).\n          // This will trigger an \"upgradeneeded\" event which is required\n          // for creating a store.\n          if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n\n            if (incVersion > dbInfo.version) {\n              dbInfo.version = incVersion;\n            }\n          }\n\n          return true;\n        }\n\n        return false;\n      } // encode a blob for indexeddb engines that don't support blobs\n\n\n      function _encodeBlob(blob) {\n        return new Promise$1(function (resolve, reject) {\n          var reader = new FileReader();\n          reader.onerror = reject;\n\n          reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n              __local_forage_encoded_blob: true,\n              data: base64,\n              type: blob.type\n            });\n          };\n\n          reader.readAsBinaryString(blob);\n        });\n      } // decode an encoded blob\n\n\n      function _decodeBlob(encodedBlob) {\n        var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n\n        return createBlob([arrayBuff], {\n          type: encodedBlob.type\n        });\n      } // is this one of our fancy encoded blobs?\n\n\n      function _isEncodedBlob(value) {\n        return value && value.__local_forage_encoded_blob;\n      } // Specialize the default `ready()` function by making it dependent\n      // on the current database operations. Thus, the driver will be actually\n      // ready when it's been initialized (default) *and* there are no pending\n      // operations on the database (initiated by some other instances).\n\n\n      function _fullyReady(callback) {\n        var self = this;\n\n        var promise = self._initReady().then(function () {\n          var dbContext = dbContexts[self._dbInfo.name];\n\n          if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n          }\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n      } // Try to establish a new db connection to replace the\n      // current one which is broken (i.e. experiencing\n      // InvalidStateError while creating a transaction).\n\n\n      function _tryReconnect(dbInfo) {\n        _deferReadiness(dbInfo);\n\n        var dbContext = dbContexts[dbInfo.name];\n        var forages = dbContext.forages;\n\n        for (var i = 0; i < forages.length; i++) {\n          var forage = forages[i];\n\n          if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n\n            forage._dbInfo.db = null;\n          }\n        }\n\n        dbInfo.db = null;\n        return _getOriginalConnection(dbInfo).then(function (db) {\n          dbInfo.db = db;\n\n          if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n          }\n\n          return db;\n        }).then(function (db) {\n          // store the latest db reference\n          // in case the db was upgraded\n          dbInfo.db = dbContext.db = db;\n\n          for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n          }\n        })[\"catch\"](function (err) {\n          _rejectReadiness(dbInfo, err);\n\n          throw err;\n        });\n      } // FF doesn't like Promises (micro-tasks) and IDDB store operations,\n      // so we have to do it with callbacks\n\n\n      function createTransaction(dbInfo, mode, callback, retries) {\n        if (retries === undefined) {\n          retries = 1;\n        }\n\n        try {\n          var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n          callback(null, tx);\n        } catch (err) {\n          if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n              if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                // increase the db version, to create the new ObjectStore\n                if (dbInfo.db) {\n                  dbInfo.version = dbInfo.db.version + 1;\n                } // Reopen the database for upgrading.\n\n\n                return _getUpgradedConnection(dbInfo);\n              }\n            }).then(function () {\n              return _tryReconnect(dbInfo).then(function () {\n                createTransaction(dbInfo, mode, callback, retries - 1);\n              });\n            })[\"catch\"](callback);\n          }\n\n          callback(err);\n        }\n      }\n\n      function createDbContext() {\n        return {\n          // Running localForages sharing a database.\n          forages: [],\n          // Shared database.\n          db: null,\n          // Database readiness (promise).\n          dbReady: null,\n          // Deferred operations on the database.\n          deferredOperations: []\n        };\n      } // Open the IndexedDB database (automatically creates one if one didn't\n      // previously exist), using any options set in the config.\n\n\n      function _initStorage(options) {\n        var self = this;\n        var dbInfo = {\n          db: null\n        };\n\n        if (options) {\n          for (var i in options) {\n            dbInfo[i] = options[i];\n          }\n        } // Get the current context of the database;\n\n\n        var dbContext = dbContexts[dbInfo.name]; // ...or create a new context.\n\n        if (!dbContext) {\n          dbContext = createDbContext(); // Register the new context in the global container.\n\n          dbContexts[dbInfo.name] = dbContext;\n        } // Register itself as a running localForage in the current context.\n\n\n        dbContext.forages.push(self); // Replace the default `ready()` function with the specialized one.\n\n        if (!self._initReady) {\n          self._initReady = self.ready;\n          self.ready = _fullyReady;\n        } // Create an array of initialization states of the related localForages.\n\n\n        var initPromises = [];\n\n        function ignoreErrors() {\n          // Don't handle errors here,\n          // just makes sure related localForages aren't pending.\n          return Promise$1.resolve();\n        }\n\n        for (var j = 0; j < dbContext.forages.length; j++) {\n          var forage = dbContext.forages[j];\n\n          if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n          }\n        } // Take a snapshot of the related localForages.\n\n\n        var forages = dbContext.forages.slice(0); // Initialize the connection process only when\n        // all the related localForages aren't pending.\n\n        return Promise$1.all(initPromises).then(function () {\n          dbInfo.db = dbContext.db; // Get the connection or open a new one without upgrade.\n\n          return _getOriginalConnection(dbInfo);\n        }).then(function (db) {\n          dbInfo.db = db;\n\n          if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n          }\n\n          return db;\n        }).then(function (db) {\n          dbInfo.db = dbContext.db = db;\n          self._dbInfo = dbInfo; // Share the final connection amongst related localForages.\n\n          for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n\n            if (forage !== self) {\n              // Self is already up-to-date.\n              forage._dbInfo.db = dbInfo.db;\n              forage._dbInfo.version = dbInfo.version;\n            }\n          }\n        });\n      }\n\n      function getItem(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var req = store.get(key);\n\n                req.onsuccess = function () {\n                  var value = req.result;\n\n                  if (value === undefined) {\n                    value = null;\n                  }\n\n                  if (_isEncodedBlob(value)) {\n                    value = _decodeBlob(value);\n                  }\n\n                  resolve(value);\n                };\n\n                req.onerror = function () {\n                  reject(req.error);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Iterate over all items stored in database.\n\n\n      function iterate(iterator, callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var req = store.openCursor();\n                var iterationNumber = 1;\n\n                req.onsuccess = function () {\n                  var cursor = req.result;\n\n                  if (cursor) {\n                    var value = cursor.value;\n\n                    if (_isEncodedBlob(value)) {\n                      value = _decodeBlob(value);\n                    }\n\n                    var result = iterator(value, cursor.key, iterationNumber++); // when the iterator callback retuns any\n                    // (non-`undefined`) value, then we stop\n                    // the iteration immediately\n\n                    if (result !== void 0) {\n                      resolve(result);\n                    } else {\n                      cursor[\"continue\"]();\n                    }\n                  } else {\n                    resolve();\n                  }\n                };\n\n                req.onerror = function () {\n                  reject(req.error);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function setItem(key, value, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          var dbInfo;\n          self.ready().then(function () {\n            dbInfo = self._dbInfo;\n\n            if (toString.call(value) === '[object Blob]') {\n              return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                if (blobSupport) {\n                  return value;\n                }\n\n                return _encodeBlob(value);\n              });\n            }\n\n            return value;\n          }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName); // The reason we don't _save_ null is because IE 10 does\n                // not support saving the `null` type in IndexedDB. How\n                // ironic, given the bug below!\n                // See: https://github.com/mozilla/localForage/issues/161\n\n                if (value === null) {\n                  value = undefined;\n                }\n\n                var req = store.put(value, key);\n\n                transaction.oncomplete = function () {\n                  // Cast to undefined so the value passed to\n                  // callback/promise is the same as what one would get out\n                  // of `getItem()` later. This leads to some weirdness\n                  // (setItem('foo', undefined) will return `null`), but\n                  // it's not my fault localStorage is our baseline and that\n                  // it's weird.\n                  if (value === undefined) {\n                    value = null;\n                  }\n\n                  resolve(value);\n                };\n\n                transaction.onabort = transaction.onerror = function () {\n                  var err = req.error ? req.error : req.transaction.error;\n                  reject(err);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function removeItem(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName); // We use a Grunt task to make this safe for IE and some\n                // versions of Android (including those used by Cordova).\n                // Normally IE won't like `.delete()` and will insist on\n                // using `['delete']()`, but we have a build step that\n                // fixes this for us now.\n\n                var req = store[\"delete\"](key);\n\n                transaction.oncomplete = function () {\n                  resolve();\n                };\n\n                transaction.onerror = function () {\n                  reject(req.error);\n                }; // The request will be also be aborted if we've exceeded our storage\n                // space.\n\n\n                transaction.onabort = function () {\n                  var err = req.error ? req.error : req.transaction.error;\n                  reject(err);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function clear(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var req = store.clear();\n\n                transaction.oncomplete = function () {\n                  resolve();\n                };\n\n                transaction.onabort = transaction.onerror = function () {\n                  var err = req.error ? req.error : req.transaction.error;\n                  reject(err);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function length(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var req = store.count();\n\n                req.onsuccess = function () {\n                  resolve(req.result);\n                };\n\n                req.onerror = function () {\n                  reject(req.error);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function key(n, callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          if (n < 0) {\n            resolve(null);\n            return;\n          }\n\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var advanced = false;\n                var req = store.openCursor();\n\n                req.onsuccess = function () {\n                  var cursor = req.result;\n\n                  if (!cursor) {\n                    // this means there weren't enough keys\n                    resolve(null);\n                    return;\n                  }\n\n                  if (n === 0) {\n                    // We have the first key, return it if that's what they\n                    // wanted.\n                    resolve(cursor.key);\n                  } else {\n                    if (!advanced) {\n                      // Otherwise, ask the cursor to skip ahead n\n                      // records.\n                      advanced = true;\n                      cursor.advance(n);\n                    } else {\n                      // When we get here, we've got the nth key.\n                      resolve(cursor.key);\n                    }\n                  }\n                };\n\n                req.onerror = function () {\n                  reject(req.error);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function keys(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n              if (err) {\n                return reject(err);\n              }\n\n              try {\n                var store = transaction.objectStore(self._dbInfo.storeName);\n                var req = store.openCursor();\n                var keys = [];\n\n                req.onsuccess = function () {\n                  var cursor = req.result;\n\n                  if (!cursor) {\n                    resolve(keys);\n                    return;\n                  }\n\n                  keys.push(cursor.key);\n                  cursor[\"continue\"]();\n                };\n\n                req.onerror = function () {\n                  reject(req.error);\n                };\n              } catch (e) {\n                reject(e);\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function dropInstance(options, callback) {\n        callback = getCallback.apply(this, arguments);\n        var currentConfig = this.config();\n        options = typeof options !== 'function' && options || {};\n\n        if (!options.name) {\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n        }\n\n        var self = this;\n        var promise;\n\n        if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n        } else {\n          var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n          var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n\n            for (var i = 0; i < forages.length; i++) {\n              forages[i]._dbInfo.db = db;\n            }\n\n            return db;\n          });\n\n          if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n              _deferReadiness(options);\n\n              var dbContext = dbContexts[options.name];\n              var forages = dbContext.forages;\n              db.close();\n\n              for (var i = 0; i < forages.length; i++) {\n                var forage = forages[i];\n                forage._dbInfo.db = null;\n              }\n\n              var dropDBPromise = new Promise$1(function (resolve, reject) {\n                var req = idb.deleteDatabase(options.name);\n\n                req.onerror = req.onblocked = function (err) {\n                  var db = req.result;\n\n                  if (db) {\n                    db.close();\n                  }\n\n                  reject(err);\n                };\n\n                req.onsuccess = function () {\n                  var db = req.result;\n\n                  if (db) {\n                    db.close();\n                  }\n\n                  resolve(db);\n                };\n              });\n              return dropDBPromise.then(function (db) {\n                dbContext.db = db;\n\n                for (var i = 0; i < forages.length; i++) {\n                  var _forage = forages[i];\n\n                  _advanceReadiness(_forage._dbInfo);\n                }\n              })[\"catch\"](function (err) {\n                (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                throw err;\n              });\n            });\n          } else {\n            promise = dbPromise.then(function (db) {\n              if (!db.objectStoreNames.contains(options.storeName)) {\n                return;\n              }\n\n              var newVersion = db.version + 1;\n\n              _deferReadiness(options);\n\n              var dbContext = dbContexts[options.name];\n              var forages = dbContext.forages;\n              db.close();\n\n              for (var i = 0; i < forages.length; i++) {\n                var forage = forages[i];\n                forage._dbInfo.db = null;\n                forage._dbInfo.version = newVersion;\n              }\n\n              var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                var req = idb.open(options.name, newVersion);\n\n                req.onerror = function (err) {\n                  var db = req.result;\n                  db.close();\n                  reject(err);\n                };\n\n                req.onupgradeneeded = function () {\n                  var db = req.result;\n                  db.deleteObjectStore(options.storeName);\n                };\n\n                req.onsuccess = function () {\n                  var db = req.result;\n                  db.close();\n                  resolve(db);\n                };\n              });\n              return dropObjectPromise.then(function (db) {\n                dbContext.db = db;\n\n                for (var j = 0; j < forages.length; j++) {\n                  var _forage2 = forages[j];\n                  _forage2._dbInfo.db = db;\n\n                  _advanceReadiness(_forage2._dbInfo);\n                }\n              })[\"catch\"](function (err) {\n                (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                throw err;\n              });\n            });\n          }\n        }\n\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      var asyncStorage = {\n        _driver: 'asyncStorage',\n        _initStorage: _initStorage,\n        _support: isIndexedDBValid(),\n        iterate: iterate,\n        getItem: getItem,\n        setItem: setItem,\n        removeItem: removeItem,\n        clear: clear,\n        length: length,\n        key: key,\n        keys: keys,\n        dropInstance: dropInstance\n      };\n\n      function isWebSQLValid() {\n        return typeof openDatabase === 'function';\n      } // Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n      // it to Base64, so this is how we store it to prevent very strange errors with less\n      // verbose ways of binary <-> string data storage.\n\n\n      var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n      var BLOB_TYPE_PREFIX = '~~local_forage_type~';\n      var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n      var SERIALIZED_MARKER = '__lfsc__:';\n      var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length; // OMG the serializations!\n\n      var TYPE_ARRAYBUFFER = 'arbf';\n      var TYPE_BLOB = 'blob';\n      var TYPE_INT8ARRAY = 'si08';\n      var TYPE_UINT8ARRAY = 'ui08';\n      var TYPE_UINT8CLAMPEDARRAY = 'uic8';\n      var TYPE_INT16ARRAY = 'si16';\n      var TYPE_INT32ARRAY = 'si32';\n      var TYPE_UINT16ARRAY = 'ur16';\n      var TYPE_UINT32ARRAY = 'ui32';\n      var TYPE_FLOAT32ARRAY = 'fl32';\n      var TYPE_FLOAT64ARRAY = 'fl64';\n      var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n      var toString$1 = Object.prototype.toString;\n\n      function stringToBuffer(serializedString) {\n        // Fill the string into a ArrayBuffer.\n        var bufferLength = serializedString.length * 0.75;\n        var len = serializedString.length;\n        var i;\n        var p = 0;\n        var encoded1, encoded2, encoded3, encoded4;\n\n        if (serializedString[serializedString.length - 1] === '=') {\n          bufferLength--;\n\n          if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n          }\n        }\n\n        var buffer = new ArrayBuffer(bufferLength);\n        var bytes = new Uint8Array(buffer);\n\n        for (i = 0; i < len; i += 4) {\n          encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n          encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n          encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n          encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n          /*jslint bitwise: true */\n\n          bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n        }\n\n        return buffer;\n      } // Converts a buffer to a string to store, serialized, in the backend\n      // storage library.\n\n\n      function bufferToString(buffer) {\n        // base64-arraybuffer\n        var bytes = new Uint8Array(buffer);\n        var base64String = '';\n        var i;\n\n        for (i = 0; i < bytes.length; i += 3) {\n          /*jslint bitwise: true */\n          base64String += BASE_CHARS[bytes[i] >> 2];\n          base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n          base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n          base64String += BASE_CHARS[bytes[i + 2] & 63];\n        }\n\n        if (bytes.length % 3 === 2) {\n          base64String = base64String.substring(0, base64String.length - 1) + '=';\n        } else if (bytes.length % 3 === 1) {\n          base64String = base64String.substring(0, base64String.length - 2) + '==';\n        }\n\n        return base64String;\n      } // Serialize a value, afterwards executing a callback (which usually\n      // instructs the `setItem()` callback/promise to be executed). This is how\n      // we store binary data with localStorage.\n\n\n      function serialize(value, callback) {\n        var valueType = '';\n\n        if (value) {\n          valueType = toString$1.call(value);\n        } // Cannot use `value instanceof ArrayBuffer` or such here, as these\n        // checks fail when running the tests using casper.js...\n        //\n        // TODO: See why those tests fail and use a better solution.\n\n\n        if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n          // Convert binary arrays to a string and prefix the string with\n          // a special marker.\n          var buffer;\n          var marker = SERIALIZED_MARKER;\n\n          if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n          } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n              marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n              marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n              marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n              marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n              marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n              marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n              marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n              marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n              marker += TYPE_FLOAT64ARRAY;\n            } else {\n              callback(new Error('Failed to get type for BinaryArray'));\n            }\n          }\n\n          callback(marker + bufferToString(buffer));\n        } else if (valueType === '[object Blob]') {\n          // Conver the blob to a binaryArray and then to a string.\n          var fileReader = new FileReader();\n\n          fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n          };\n\n          fileReader.readAsArrayBuffer(value);\n        } else {\n          try {\n            callback(JSON.stringify(value));\n          } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n            callback(null, e);\n          }\n        }\n      } // Deserialize data we've inserted into a value column/field. We place\n      // special markers into our strings to mark them as encoded; this isn't\n      // as nice as a meta field, but it's the only sane thing we can do whilst\n      // keeping localStorage support intact.\n      //\n      // Oftentimes this will just deserialize JSON content, but if we have a\n      // special marker (SERIALIZED_MARKER, defined above), we will extract\n      // some kind of arraybuffer/binary data/typed array out of the string.\n\n\n      function deserialize(value) {\n        // If we haven't marked this string as being specially serialized (i.e.\n        // something other than serialized JSON), we can just return it and be\n        // done with it.\n        if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n          return JSON.parse(value);\n        } // The following code deals with deserializing some kind of Blob or\n        // TypedArray. First we separate out the type of data we're dealing\n        // with from the data itself.\n\n\n        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n        var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n        var blobType; // Backwards-compatible blob type serialization strategy.\n        // DBs created with older versions of localForage will simply not have the blob type.\n\n        if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n          var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n          blobType = matcher[1];\n          serializedString = serializedString.substring(matcher[0].length);\n        }\n\n        var buffer = stringToBuffer(serializedString); // Return the right type based on the code/type set during\n        // serialization.\n\n        switch (type) {\n          case TYPE_ARRAYBUFFER:\n            return buffer;\n\n          case TYPE_BLOB:\n            return createBlob([buffer], {\n              type: blobType\n            });\n\n          case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n\n          case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n\n          case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n\n          case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n\n          case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n\n          case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n\n          case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n\n          case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n\n          case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n\n          default:\n            throw new Error('Unkown type: ' + type);\n        }\n      }\n\n      var localforageSerializer = {\n        serialize: serialize,\n        deserialize: deserialize,\n        stringToBuffer: stringToBuffer,\n        bufferToString: bufferToString\n      };\n      /*\n       * Includes code from:\n       *\n       * base64-arraybuffer\n       * https://github.com/niklasvh/base64-arraybuffer\n       *\n       * Copyright (c) 2012 Niklas von Hertzen\n       * Licensed under the MIT license.\n       */\n\n      function createDbTable(t, dbInfo, callback, errorCallback) {\n        t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n      } // Open the WebSQL database (automatically creates one if one didn't\n      // previously exist), using any options set in the config.\n\n\n      function _initStorage$1(options) {\n        var self = this;\n        var dbInfo = {\n          db: null\n        };\n\n        if (options) {\n          for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n          }\n        }\n\n        var dbInfoPromise = new Promise$1(function (resolve, reject) {\n          // Open the database; the openDatabase API will automatically\n          // create it for us if it doesn't exist.\n          try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n          } catch (e) {\n            return reject(e);\n          } // Create our key/value table if it doesn't exist.\n\n\n          dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n              self._dbInfo = dbInfo;\n              resolve();\n            }, function (t, error) {\n              reject(error);\n            });\n          }, reject);\n        });\n        dbInfo.serializer = localforageSerializer;\n        return dbInfoPromise;\n      }\n\n      function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n        t.executeSql(sqlStatement, args, callback, function (t, error) {\n          if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n              if (!results.rows.length) {\n                // if the table is missing (was deleted)\n                // re-create it table and retry\n                createDbTable(t, dbInfo, function () {\n                  t.executeSql(sqlStatement, args, callback, errorCallback);\n                }, errorCallback);\n              } else {\n                errorCallback(t, error);\n              }\n            }, errorCallback);\n          } else {\n            errorCallback(t, error);\n          }\n        }, errorCallback);\n      }\n\n      function getItem$1(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                var result = results.rows.length ? results.rows.item(0).value : null; // Check to see if this is serialized content we need to\n                // unpack.\n\n                if (result) {\n                  result = dbInfo.serializer.deserialize(result);\n                }\n\n                resolve(result);\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function iterate$1(iterator, callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                var rows = results.rows;\n                var length = rows.length;\n\n                for (var i = 0; i < length; i++) {\n                  var item = rows.item(i);\n                  var result = item.value; // Check to see if this is serialized content\n                  // we need to unpack.\n\n                  if (result) {\n                    result = dbInfo.serializer.deserialize(result);\n                  }\n\n                  result = iterator(result, item.key, i + 1); // void(0) prevents problems with redefinition\n                  // of `undefined`.\n\n                  if (result !== void 0) {\n                    resolve(result);\n                    return;\n                  }\n                }\n\n                resolve();\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function _setItem(key, value, callback, retriesLeft) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n              value = null;\n            } // Save the original value to pass to the callback.\n\n\n            var originalValue = value;\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n              if (error) {\n                reject(error);\n              } else {\n                dbInfo.db.transaction(function (t) {\n                  tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                    resolve(originalValue);\n                  }, function (t, error) {\n                    reject(error);\n                  });\n                }, function (sqlError) {\n                  // The transaction failed; check\n                  // to see if it's a quota error.\n                  if (sqlError.code === sqlError.QUOTA_ERR) {\n                    // We reject the callback outright for now, but\n                    // it's worth trying to re-run the transaction.\n                    // Even if the user accepts the prompt to use\n                    // more storage on Safari, this error will\n                    // be called.\n                    //\n                    // Try to re-run the transaction.\n                    if (retriesLeft > 0) {\n                      resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                      return;\n                    }\n\n                    reject(sqlError);\n                  }\n                });\n              }\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function setItem$1(key, value, callback) {\n        return _setItem.apply(this, [key, value, callback, 1]);\n      }\n\n      function removeItem$1(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                resolve();\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Deletes every item in the table.\n      // TODO: Find out if this resets the AUTO_INCREMENT number.\n\n\n      function clear$1(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                resolve();\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Does a simple `COUNT(key)` to get the number of items stored in\n      // localForage.\n\n\n      function length$1(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              // Ahhh, SQL makes this one soooooo easy.\n              tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                var result = results.rows.item(0).c;\n                resolve(result);\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Return the key located at key index X; essentially gets the key from a\n      // `WHERE id = ?`. This is the most efficient way I can think to implement\n      // this rarely-used (in my experience) part of the API, but it can seem\n      // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n      // the ID of each key will change every time it's updated. Perhaps a stored\n      // procedure for the `setItem()` SQL would solve this problem?\n      // TODO: Don't change ID on `setItem()`.\n\n\n      function key$1(n, callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                var result = results.rows.length ? results.rows.item(0).key : null;\n                resolve(result);\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function keys$1(callback) {\n        var self = this;\n        var promise = new Promise$1(function (resolve, reject) {\n          self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n              tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                var keys = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                  keys.push(results.rows.item(i).key);\n                }\n\n                resolve(keys);\n              }, function (t, error) {\n                reject(error);\n              });\n            });\n          })[\"catch\"](reject);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // https://www.w3.org/TR/webdatabase/#databases\n      // > There is no way to enumerate or delete the databases available for an origin from this API.\n\n\n      function getAllStoreNames(db) {\n        return new Promise$1(function (resolve, reject) {\n          db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n              var storeNames = [];\n\n              for (var i = 0; i < results.rows.length; i++) {\n                storeNames.push(results.rows.item(i).name);\n              }\n\n              resolve({\n                db: db,\n                storeNames: storeNames\n              });\n            }, function (t, error) {\n              reject(error);\n            });\n          }, function (sqlError) {\n            reject(sqlError);\n          });\n        });\n      }\n\n      function dropInstance$1(options, callback) {\n        callback = getCallback.apply(this, arguments);\n        var currentConfig = this.config();\n        options = typeof options !== 'function' && options || {};\n\n        if (!options.name) {\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n        }\n\n        var self = this;\n        var promise;\n\n        if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n        } else {\n          promise = new Promise$1(function (resolve) {\n            var db;\n\n            if (options.name === currentConfig.name) {\n              // use the db reference of the current instance\n              db = self._dbInfo.db;\n            } else {\n              db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n              // drop all database tables\n              resolve(getAllStoreNames(db));\n            } else {\n              resolve({\n                db: db,\n                storeNames: [options.storeName]\n              });\n            }\n          }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n              operationInfo.db.transaction(function (t) {\n                function dropTable(storeName) {\n                  return new Promise$1(function (resolve, reject) {\n                    t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                      resolve();\n                    }, function (t, error) {\n                      reject(error);\n                    });\n                  });\n                }\n\n                var operations = [];\n\n                for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                  operations.push(dropTable(operationInfo.storeNames[i]));\n                }\n\n                Promise$1.all(operations).then(function () {\n                  resolve();\n                })[\"catch\"](function (e) {\n                  reject(e);\n                });\n              }, function (sqlError) {\n                reject(sqlError);\n              });\n            });\n          });\n        }\n\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      var webSQLStorage = {\n        _driver: 'webSQLStorage',\n        _initStorage: _initStorage$1,\n        _support: isWebSQLValid(),\n        iterate: iterate$1,\n        getItem: getItem$1,\n        setItem: setItem$1,\n        removeItem: removeItem$1,\n        clear: clear$1,\n        length: length$1,\n        key: key$1,\n        keys: keys$1,\n        dropInstance: dropInstance$1\n      };\n\n      function isLocalStorageValid() {\n        try {\n          return typeof localStorage !== 'undefined' && 'setItem' in localStorage && // in IE8 typeof localStorage.setItem === 'object'\n          !!localStorage.setItem;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      function _getKeyPrefix(options, defaultConfig) {\n        var keyPrefix = options.name + '/';\n\n        if (options.storeName !== defaultConfig.storeName) {\n          keyPrefix += options.storeName + '/';\n        }\n\n        return keyPrefix;\n      } // Check if localStorage throws when saving an item\n\n\n      function checkIfLocalStorageThrows() {\n        var localStorageTestKey = '_localforage_support_test';\n\n        try {\n          localStorage.setItem(localStorageTestKey, true);\n          localStorage.removeItem(localStorageTestKey);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      } // Check if localStorage is usable and allows to save an item\n      // This method checks if localStorage is usable in Safari Private Browsing\n      // mode, or in any other case where the available quota for localStorage\n      // is 0 and there wasn't any saved items yet.\n\n\n      function _isLocalStorageUsable() {\n        return !checkIfLocalStorageThrows() || localStorage.length > 0;\n      } // Config the localStorage backend, using options set in the config.\n\n\n      function _initStorage$2(options) {\n        var self = this;\n        var dbInfo = {};\n\n        if (options) {\n          for (var i in options) {\n            dbInfo[i] = options[i];\n          }\n        }\n\n        dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n        if (!_isLocalStorageUsable()) {\n          return Promise$1.reject();\n        }\n\n        self._dbInfo = dbInfo;\n        dbInfo.serializer = localforageSerializer;\n        return Promise$1.resolve();\n      } // Remove all keys from the datastore, effectively destroying all data in\n      // the app's key/value store!\n\n\n      function clear$2(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n          var keyPrefix = self._dbInfo.keyPrefix;\n\n          for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n              localStorage.removeItem(key);\n            }\n          }\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Retrieve an item from the store. Unlike the original async_storage\n      // library in Gaia, we don't modify return values at all. If a key's value\n      // is `undefined`, we pass that value to the callback function.\n\n\n      function getItem$2(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var result = localStorage.getItem(dbInfo.keyPrefix + key); // If a result was found, parse it from the serialized\n          // string into a JS object. If result isn't truthy, the key\n          // is likely undefined and we'll pass it straight to the\n          // callback.\n\n          if (result) {\n            result = dbInfo.serializer.deserialize(result);\n          }\n\n          return result;\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Iterate over all items in the store.\n\n\n      function iterate$2(iterator, callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var keyPrefix = dbInfo.keyPrefix;\n          var keyPrefixLength = keyPrefix.length;\n          var length = localStorage.length; // We use a dedicated iterator instead of the `i` variable below\n          // so other keys we fetch in localStorage aren't counted in\n          // the `iterationNumber` argument passed to the `iterate()`\n          // callback.\n          //\n          // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n\n          var iterationNumber = 1;\n\n          for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) !== 0) {\n              continue;\n            }\n\n            var value = localStorage.getItem(key); // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n\n            if (value) {\n              value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n              return value;\n            }\n          }\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Same as localStorage's key() method, except takes a callback.\n\n\n      function key$2(n, callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var result;\n\n          try {\n            result = localStorage.key(n);\n          } catch (error) {\n            result = null;\n          } // Remove the prefix from the key, if a key is found.\n\n\n          if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n          }\n\n          return result;\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function keys$2(callback) {\n        var self = this;\n        var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          var length = localStorage.length;\n          var keys = [];\n\n          for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n              keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n          }\n\n          return keys;\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Supply the number of keys in the datastore to the callback function.\n\n\n      function length$2(callback) {\n        var self = this;\n        var promise = self.keys().then(function (keys) {\n          return keys.length;\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Remove an item from the store, nice and simple.\n\n\n      function removeItem$2(key, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = self.ready().then(function () {\n          var dbInfo = self._dbInfo;\n          localStorage.removeItem(dbInfo.keyPrefix + key);\n        });\n        executeCallback(promise, callback);\n        return promise;\n      } // Set a key's value and run an optional callback once the value is set.\n      // Unlike Gaia's implementation, the callback function is passed the value,\n      // in case you want to operate on that value only after you're sure it\n      // saved, or something like that.\n\n\n      function setItem$2(key, value, callback) {\n        var self = this;\n        key = normalizeKey(key);\n        var promise = self.ready().then(function () {\n          // Convert undefined values to null.\n          // https://github.com/mozilla/localForage/pull/42\n          if (value === undefined) {\n            value = null;\n          } // Save the original value to pass to the callback.\n\n\n          var originalValue = value;\n          return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n              if (error) {\n                reject(error);\n              } else {\n                try {\n                  localStorage.setItem(dbInfo.keyPrefix + key, value);\n                  resolve(originalValue);\n                } catch (e) {\n                  // localStorage capacity exceeded.\n                  // TODO: Make this a specific error/event.\n                  if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                    reject(e);\n                  }\n\n                  reject(e);\n                }\n              }\n            });\n          });\n        });\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      function dropInstance$2(options, callback) {\n        callback = getCallback.apply(this, arguments);\n        options = typeof options !== 'function' && options || {};\n\n        if (!options.name) {\n          var currentConfig = this.config();\n          options.name = options.name || currentConfig.name;\n          options.storeName = options.storeName || currentConfig.storeName;\n        }\n\n        var self = this;\n        var promise;\n\n        if (!options.name) {\n          promise = Promise$1.reject('Invalid arguments');\n        } else {\n          promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n              resolve(options.name + '/');\n            } else {\n              resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n          }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n              var key = localStorage.key(i);\n\n              if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n              }\n            }\n          });\n        }\n\n        executeCallback(promise, callback);\n        return promise;\n      }\n\n      var localStorageWrapper = {\n        _driver: 'localStorageWrapper',\n        _initStorage: _initStorage$2,\n        _support: isLocalStorageValid(),\n        iterate: iterate$2,\n        getItem: getItem$2,\n        setItem: setItem$2,\n        removeItem: removeItem$2,\n        clear: clear$2,\n        length: length$2,\n        key: key$2,\n        keys: keys$2,\n        dropInstance: dropInstance$2\n      };\n\n      var sameValue = function sameValue(x, y) {\n        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n      };\n\n      var includes = function includes(array, searchElement) {\n        var len = array.length;\n        var i = 0;\n\n        while (i < len) {\n          if (sameValue(array[i], searchElement)) {\n            return true;\n          }\n\n          i++;\n        }\n\n        return false;\n      };\n\n      var isArray = Array.isArray || function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      }; // Drivers are stored here when `defineDriver()` is called.\n      // They are shared across all instances of localForage.\n\n\n      var DefinedDrivers = {};\n      var DriverSupport = {};\n      var DefaultDrivers = {\n        INDEXEDDB: asyncStorage,\n        WEBSQL: webSQLStorage,\n        LOCALSTORAGE: localStorageWrapper\n      };\n      var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n      var OptionalDriverMethods = ['dropInstance'];\n      var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n      var DefaultConfig = {\n        description: '',\n        driver: DefaultDriverOrder.slice(),\n        name: 'localforage',\n        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n        // we can use without a prompt.\n        size: 4980736,\n        storeName: 'keyvaluepairs',\n        version: 1.0\n      };\n\n      function callWhenReady(localForageInstance, libraryMethod) {\n        localForageInstance[libraryMethod] = function () {\n          var _args = arguments;\n          return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n          });\n        };\n      }\n\n      function extend() {\n        for (var i = 1; i < arguments.length; i++) {\n          var arg = arguments[i];\n\n          if (arg) {\n            for (var _key in arg) {\n              if (arg.hasOwnProperty(_key)) {\n                if (isArray(arg[_key])) {\n                  arguments[0][_key] = arg[_key].slice();\n                } else {\n                  arguments[0][_key] = arg[_key];\n                }\n              }\n            }\n          }\n        }\n\n        return arguments[0];\n      }\n\n      var LocalForage = function () {\n        function LocalForage(options) {\n          _classCallCheck(this, LocalForage);\n\n          for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n              var driver = DefaultDrivers[driverTypeKey];\n              var driverName = driver._driver;\n              this[driverTypeKey] = driverName;\n\n              if (!DefinedDrivers[driverName]) {\n                // we don't need to wait for the promise,\n                // since the default drivers can be defined\n                // in a blocking manner\n                this.defineDriver(driver);\n              }\n            }\n          }\n\n          this._defaultConfig = extend({}, DefaultConfig);\n          this._config = extend({}, this._defaultConfig, options);\n          this._driverSet = null;\n          this._initDriver = null;\n          this._ready = false;\n          this._dbInfo = null;\n\n          this._wrapLibraryMethodsWithReady();\n\n          this.setDriver(this._config.driver)[\"catch\"](function () {});\n        } // Set any config values for localForage; can be called anytime before\n        // the first API call (e.g. `getItem`, `setItem`).\n        // We loop through options so we don't overwrite existing config\n        // values.\n\n\n        LocalForage.prototype.config = function config(options) {\n          // If the options argument is an object, we use it to set values.\n          // Otherwise, we return either a specified config value or all\n          // config values.\n          if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n              return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n              if (i === 'storeName') {\n                options[i] = options[i].replace(/\\W/g, '_');\n              }\n\n              if (i === 'version' && typeof options[i] !== 'number') {\n                return new Error('Database version must be a number.');\n              }\n\n              this._config[i] = options[i];\n            } // after all config options are set and\n            // the driver option is used, try setting it\n\n\n            if ('driver' in options && options.driver) {\n              return this.setDriver(this._config.driver);\n            }\n\n            return true;\n          } else if (typeof options === 'string') {\n            return this._config[options];\n          } else {\n            return this._config;\n          }\n        }; // Used to define a custom driver, shared across all instances of\n        // localForage.\n\n\n        LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n          var promise = new Promise$1(function (resolve, reject) {\n            try {\n              var driverName = driverObject._driver;\n              var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver'); // A driver name should be defined and not overlap with the\n              // library-defined, default drivers.\n\n              if (!driverObject._driver) {\n                reject(complianceError);\n                return;\n              }\n\n              var driverMethods = LibraryMethods.concat('_initStorage');\n\n              for (var i = 0, len = driverMethods.length; i < len; i++) {\n                var driverMethodName = driverMethods[i]; // when the property is there,\n                // it should be a method even when optional\n\n                var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n\n                if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                  reject(complianceError);\n                  return;\n                }\n              }\n\n              var configureMissingMethods = function configureMissingMethods() {\n                var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                  return function () {\n                    var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                    var promise = Promise$1.reject(error);\n                    executeCallback(promise, arguments[arguments.length - 1]);\n                    return promise;\n                  };\n                };\n\n                for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                  var optionalDriverMethod = OptionalDriverMethods[_i];\n\n                  if (!driverObject[optionalDriverMethod]) {\n                    driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                  }\n                }\n              };\n\n              configureMissingMethods();\n\n              var setDriverSupport = function setDriverSupport(support) {\n                if (DefinedDrivers[driverName]) {\n                  console.info('Redefining LocalForage driver: ' + driverName);\n                }\n\n                DefinedDrivers[driverName] = driverObject;\n                DriverSupport[driverName] = support; // don't use a then, so that we can define\n                // drivers that have simple _support methods\n                // in a blocking manner\n\n                resolve();\n              };\n\n              if ('_support' in driverObject) {\n                if (driverObject._support && typeof driverObject._support === 'function') {\n                  driverObject._support().then(setDriverSupport, reject);\n                } else {\n                  setDriverSupport(!!driverObject._support);\n                }\n              } else {\n                setDriverSupport(true);\n              }\n            } catch (e) {\n              reject(e);\n            }\n          });\n          executeTwoCallbacks(promise, callback, errorCallback);\n          return promise;\n        };\n\n        LocalForage.prototype.driver = function driver() {\n          return this._driver || null;\n        };\n\n        LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n          var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n          executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n          return getDriverPromise;\n        };\n\n        LocalForage.prototype.getSerializer = function getSerializer(callback) {\n          var serializerPromise = Promise$1.resolve(localforageSerializer);\n          executeTwoCallbacks(serializerPromise, callback);\n          return serializerPromise;\n        };\n\n        LocalForage.prototype.ready = function ready(callback) {\n          var self = this;\n\n          var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n              self._ready = self._initDriver();\n            }\n\n            return self._ready;\n          });\n\n          executeTwoCallbacks(promise, callback, callback);\n          return promise;\n        };\n\n        LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n          var self = this;\n\n          if (!isArray(drivers)) {\n            drivers = [drivers];\n          }\n\n          var supportedDrivers = this._getSupportedDrivers(drivers);\n\n          function setDriverToConfig() {\n            self._config.driver = self.driver();\n          }\n\n          function extendSelfWithDriver(driver) {\n            self._extend(driver);\n\n            setDriverToConfig();\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n          }\n\n          function initDriver(supportedDrivers) {\n            return function () {\n              var currentDriverIndex = 0;\n\n              function driverPromiseLoop() {\n                while (currentDriverIndex < supportedDrivers.length) {\n                  var driverName = supportedDrivers[currentDriverIndex];\n                  currentDriverIndex++;\n                  self._dbInfo = null;\n                  self._ready = null;\n                  return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                }\n\n                setDriverToConfig();\n                var error = new Error('No available storage method found.');\n                self._driverSet = Promise$1.reject(error);\n                return self._driverSet;\n              }\n\n              return driverPromiseLoop();\n            };\n          } // There might be a driver initialization in progress\n          // so wait for it to finish in order to avoid a possible\n          // race condition to set _dbInfo\n\n\n          var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n          }) : Promise$1.resolve();\n          this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n            return self.getDriver(driverName).then(function (driver) {\n              self._driver = driver._driver;\n              setDriverToConfig();\n\n              self._wrapLibraryMethodsWithReady();\n\n              self._initDriver = initDriver(supportedDrivers);\n            });\n          })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n          });\n          executeTwoCallbacks(this._driverSet, callback, errorCallback);\n          return this._driverSet;\n        };\n\n        LocalForage.prototype.supports = function supports(driverName) {\n          return !!DriverSupport[driverName];\n        };\n\n        LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n          extend(this, libraryMethodsAndProperties);\n        };\n\n        LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n          var supportedDrivers = [];\n\n          for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n\n            if (this.supports(driverName)) {\n              supportedDrivers.push(driverName);\n            }\n          }\n\n          return supportedDrivers;\n        };\n\n        LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n          // Add a stub for each driver API method that delays the call to the\n          // corresponding driver method until localForage is ready. These stubs\n          // will be replaced by the driver methods as soon as the driver is\n          // loaded, so there is no performance impact.\n          for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n          }\n        };\n\n        LocalForage.prototype.createInstance = function createInstance(options) {\n          return new LocalForage(options);\n        };\n\n        return LocalForage;\n      }(); // The actual localForage object that we expose as a module or via a\n      // global. It's extended by pulling in one of our other libraries.\n\n\n      var localforage_js = new LocalForage();\n      module.exports = localforage_js;\n    }, {\n      \"3\": 3\n    }]\n  }, {}, [4])(4);\n});"],"sourceRoot":""}