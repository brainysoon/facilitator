{"version":3,"sources":["shared/components/spinner.jsx","shared/styles/spinnerStyles.js","bootstrap/app.jsx","landing/reducers/index.js","landing/reducers/landingPageReducer.js","landing/actions/landingActionTypes.js","election/reducers/homePageReducer.js","election/reducers/resultPageReducer.js","election/reducers/index.js","settings/reducers/togglesPageReducers.js","settings/reducers/index.js","bootstrap/reducers/appReducer.js","bootstrap/reducers/rootReducer.js","shared/objects/browserObjects.js","bootstrap/store.js","bootstrap/index.js","serviceWorker.js","index.js","election/actions/electionActionTypes.js","settings/actions/settingsActionTypes.js"],"names":["Spinner","classes","this","props","react_default","a","createElement","className","root","CircularProgress_default","spinner","Component","withStyles","display","justifyContent","width","padding","Election","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","Settings","app","Switch","Route","exact","path","component","combineReducers","landingPage","arguments","length","undefined","type","counter","brand","firstLandingPage","ELECTION_FETCH_ELECTORS","ElectionActionTypes","response","state","action","ELECTION_START_ELECT","initialState","result","homePage","resultPage","SETTINGS_TOGGLE_TOGGLES","SettingsActions","SETTINGS_FETCH_TOGGLES","initialTogglesState","landingAnimation","toggles","togglesPage","landing","election","settings","history","createBrowserHistory","composeEnhancers","compose","store","createStore","connectRouter","rootReducer","applyMiddleware","routerMiddleware","ReduxThunk","bootstrap","es","lib","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Bootstrap","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","__webpack_exports__","ELECTION_ADD_ELECTOR"],"mappings":"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","file":"static/js/main.07c3f94e.chunk.js","sourcesContent":["// @flow\n\nimport React, { Component } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport SpinnerStyles from '../styles/spinnerStyles';\n\ntype Props = {\n  classes: *\n};\n\nclass Spinner extends Component<Props> {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <CircularProgress className={classes.spinner} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(SpinnerStyles)(Spinner);\n","export default {\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  spinner: {\n    padding: '2rem'\n  }\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport Spinner from '../shared/components/spinner';\n\nconst Election = Loadable({\n  loader: () => import('../election'),\n  loading: Spinner\n});\n\nconst Settings = Loadable({\n  loader: () => import('../settings'),\n  loading: Spinner\n});\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={Election} />\n    <Route path=\"/election\" component={Election} />\n    <Route path=\"/settings\" component={Settings} />\n  </Switch>\n);\n","import { combineReducers } from 'redux';\n\nimport landingPage from './landingPageReducer';\nimport firstLandingPage from './firstLandingPageReducer';\n\nexport default combineReducers({ landingPage, firstLandingPage });\n","import LandingActionTypes from '../actions/landingActionTypes';\n\nconst { LANDING_FETCH_LANDING_PAGE } = LandingActionTypes;\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case LANDING_FETCH_LANDING_PAGE: {\n      return {\n        counter: 3,\n        brand:\n          'https://up.enterdesk.com/edpic/76/54/b2/7654b28b1df8bed811dba6e29f3b2840.jpg'\n      };\n    }\n    default: {\n      return {\n        counter: 3,\n        brand:\n          'https://up.enterdesk.com/edpic/76/54/b2/7654b28b1df8bed811dba6e29f3b2840.jpg'\n      };\n    }\n  }\n};\n","export default {\n  LANDING_FETCH_LANDING_STATUS: 'LANDING_FETCH_LANDING_STATUS',\n  LANDING_FETCH_LANDING_PAGE: 'LANDING_FETCH_LANDING_PAGE'\n};\n","import { combineReducers } from 'redux';\n\nimport ElectionActionTypes from '../actions/electionActionTypes';\n\nconst { ELECTION_FETCH_ELECTORS } = ElectionActionTypes;\n\nconst response = (state = {}, action) => {\n  switch (action.type) {\n    case ELECTION_FETCH_ELECTORS: {\n      return action.response;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default combineReducers({ response });\n","import { combineReducers } from 'redux';\n\nimport ElectionActionTypes from '../actions/electionActionTypes';\n\nconst { ELECTION_START_ELECT } = ElectionActionTypes;\n\nconst initialState = {};\n\nconst result = (state = initialState, action) => {\n  switch (action.type) {\n    case ELECTION_START_ELECT: {\n      return action.result;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default combineReducers({ result });\n","import { combineReducers } from 'redux';\n\nimport homePage from './homePageReducer';\nimport resultPage from './resultPageReducer';\n\nexport default combineReducers({ homePage, resultPage });\n","// @flow\n\nimport { combineReducers } from 'redux';\n\nimport SettingsActions from '../actions/settingsActionTypes';\n\nconst { SETTINGS_TOGGLE_TOGGLES, SETTINGS_FETCH_TOGGLES } = SettingsActions;\n\nconst initialTogglesState = {\n  landingAnimation: false\n};\n\nconst toggles = (state = initialTogglesState, action) => {\n  switch (action.type) {\n    case SETTINGS_FETCH_TOGGLES:\n    case SETTINGS_TOGGLE_TOGGLES: {\n      return action.toggles;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default combineReducers({ toggles });\n","import { combineReducers } from 'redux';\n\nimport togglesPage from './togglesPageReducers';\n\nexport default combineReducers({ togglesPage });\n","import { combineReducers } from 'redux';\n\nimport landing from '../../landing/reducers';\nimport election from '../../election/reducers';\nimport settings from '../../settings/reducers';\n\nexport default combineReducers({ landing, election, settings });\n","import { combineReducers } from 'redux';\n\nimport app from './appReducer';\n\nexport default combineReducers({ app });\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\n\nimport rootReducer from './reducers/rootReducer';\nimport { history } from '../shared/objects/browserObjects';\n\nconst reduxDevTools =\n  process.env.NODE_ENV !== 'production' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconst composeEnhancers = reduxDevTools || compose;\n\nexport default createStore(\n  connectRouter(history)(rootReducer),\n  composeEnhancers(applyMiddleware(routerMiddleware(history), ReduxThunk))\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport app from './app';\nimport store from './store';\nimport { history } from '../shared/objects/browserObjects';\n\nexport default (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>{app}</ConnectedRouter>\n  </Provider>\n);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Bootstrap from './bootstrap/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(Bootstrap, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","export default {\n  ELECTION_START_ELECT: 'ELECTION_START_ELECT',\n  ELECTION_ADD_ELECTOR: 'ELECTION_ADD_ELECTOR',\n  ELECTION_FETCH_ELECTORS: 'ELECTION_FETCH_ELECTORS'\n};\n","export default {\n  SETTINGS_TOGGLE_TOGGLES: 'SETTINGS_TOGGLE_TOGGLES',\n  SETTINGS_FETCH_TOGGLES: 'SETTINGS_FETCH_TOGGLES'\n};\n"],"sourceRoot":""}